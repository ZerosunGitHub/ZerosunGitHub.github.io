<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[给你分享2018年的书单]]></title>
    <url>%2F2018%2F11%2F07%2Fbooklist-2018%2F</url>
    <content type="text"></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
        <tag>BookList</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku-Misc-Writeup]]></title>
    <url>%2F2018%2F11%2F07%2FBugku-Misc-Writeup%2F</url>
    <content type="text"></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Repositories Starred on Github]]></title>
    <url>%2F2018%2F11%2F07%2Frepositories-starred-on-github%2F</url>
    <content type="text"><![CDATA[我在Github上收藏的一些的一些Repositories，GitHub没有对收藏进行分类标签的功能，下面做了一个整理归类，方便以后查阅。 ToolsCTFLinux]]></content>
      <categories>
        <category>favorites</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xmanager远程Ubuntu1604LTS]]></title>
    <url>%2F2018%2F09%2F19%2Fconnect-xmanager2ubuntu1604lts%2F</url>
    <content type="text"><![CDATA[简述：ubuntu1604：xmanager+xdmcp+lightdm+xubuntu(xfce)桌面环境 ubuntu1604具体步骤1.安装gdm3与lightdm1$ sudo apt install gdm -y 会弹出窗口，选择lightdm就好。 2.配置lightdm配置文件需要新建，lightdm.conf and gdm.schemas1$ sudo nano /etc/lightdm/lightdm.conf 粘贴以下内容：1234567[SeatDefaults]greeter-show-manual-login=truexserver-allow-tcp=true[XDMCPServer]Enabled=truePort=177 1$ sudo nano /etc/lightdm/gdm.schemas 粘贴以下内容：12345&lt;schema&gt;&lt;key&gt;xdmcp/Enable&lt;/key&gt;&lt;signature&gt;b&lt;/signature&gt;&lt;default&gt;true&lt;/default&gt;&lt;/schema&gt; 3.安装xubuntu-desktopxubuntu-desktop用的就是xfce，一个轻量级的unix桌面管理环境,消耗资源少，UI也还比较美观。123$ sudo apt-get update$ sudo apt-get upgrade$ sudo apt install xubuntu-desktop -y #时间较久 4.关闭防火墙1234$ sudo ufw disableor$ sudo ufw allow 177either is OK! 5.修改配置Ubuntu文件1$ sudo nano /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf 内容修改后如下：123456789[Seat:*]user-session=ubuntu#user-session=gnome#added by myself[XDMCPServer]enabled=true[SeatDefaults]xserver-allow-tcp=true 6.连接连接时登陆界面右上角选择“Xubuntu Session”主题即可，后附图。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[以太坊智能合约-环境搭建]]></title>
    <url>%2F2018%2F09%2F18%2FEthereum-SmartContract-setup-env%2F</url>
    <content type="text"><![CDATA[智能合约开发环境搭建进行智能合约开发环境搭建前，建议自行搭建一遍以太坊私有链官方链接：REMIX-IDE GitHubremix-ide参考链接：以太坊智能合约开发 - 环境搭建待续：基于以太坊构建私有区块链网络教程指南Ethereum以太网搭建本地开放环境简明教程 RemixRemix is a browser-based compiler and IDE that enables users to build Ethereum contracts with Solidity language and to debug transactions 安装Install npm and node.js安装nmp和nodejd请参考另一篇文章 npm InstallRemix-ide has been published as an npm module:1$ npm install -g remix-ide 切换为国内的源，没有安装成功 source code Install1npm config set registry https://registry.npm.taobao.org clone the github repository(wget need to be installed first) :12345$ git clone https://github.com/ethereum/remix-ide.git$ cd remix-ide$ npm install #很久$ npm run setupremix # this will clone https://github.com/ethereum/remix for you and link it to remix-ide. Only execute this step if you want to contribute on Remix development$ npm start 现在可以通过Run 浏览器访问 http://127.0.0.1:808012345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&gt; remix-ide@0.7.2 start /home/sun/remix-ide&gt; npm-run-all -lpr serve watch onchange remixd[serve ][serve ] &gt; remix-ide@0.7.2 serve /home/sun/remix-ide[serve ] &gt; execr --silent http-server .[serve ][watch ][watch ] &gt; remix-ide@0.7.2 watch /home/sun/remix-ide[watch ] &gt; watchify src/index.js -dv -p browserify-reload -o build/app.js --exclude solc[watch ][onchange][onchange] &gt; remix-ide@0.7.2 onchange /home/sun/remix-ide[onchange] &gt; onchange build/app.js -- npm-run-all lint[onchange][remixd ][remixd ] &gt; remix-ide@0.7.2 remixd /home/sun/remix-ide[remixd ] &gt; ./node_modules/remixd/bin/remixd -s ./contracts[remixd ][watch ] WS server listening on 33703[remixd ] example: --dev-path /home/devchains/chain1 --mist --geth --frontend /home/frontend --frontend-port 8084 --auto-mine[remixd ] Usage: remixd -s &lt;shared folder&gt;[remixd ][remixd ] Provide a two ways connection between the local computer and Remix IDE[remixd ][remixd ] Options:[remixd ][remixd ] -s, --shared-folder &lt;path&gt; Folder to share with Remix IDE[remixd ] -m, --mist start mist[remixd ] -g, --geth start geth[remixd ] -p, --dev-path &lt;dev-path&gt; Folder used by mist/geth to start the development instance[remixd ] -f, --frontend &lt;front-end&gt; Folder that should be served by remixd[remixd ] -p, --frontend-port &lt;front-end-port&gt; Http port used by the frontend (default 8082)[remixd ] -a, --auto-mine mine pending transactions[remixd ] -r, --rpc &lt;cors-domains&gt; start rpc server. Values are CORS domain[remixd ] -rp, --rpc-port rpc server port (default 8545)[remixd ] --profiler start profiler service[remixd ] -h, --help output usage information[remixd ] [WARN] Any application that runs on your computer can potentially read from and write to all files in the directory.[remixd ] [WARN] Symbolinc links are not forwarded to Remix IDE[remixd ][remixd ] [WARN] Symbolic link modification not allowed : ./contracts | /home/sun/remix-ide/contracts[remixd ] Tue Sep 18 2018 19:23:38 GMT+0900 (KST) Remixd is listening on 127.0.0.1:65520[watch ] NOW ASKING FOR CLIENT TO RELOAD[watch ] 24493914 bytes written to build/app.js (27.32 seconds) at 19:24:04[onchange][onchange] &gt; remix-ide@0.7.2 lint /home/sun/remix-ide[onchange] &gt; standard | notify-error[onchange] 一个简单的智能合约部署一个ERC20的合约]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>Ethereum</tag>
        <tag>BlockChain</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块基础-区块链简介]]></title>
    <url>%2F2018%2F09%2F11%2FBlockChain-Basis-simple-intro%2F</url>
    <content type="text"><![CDATA[区块链作为目前最为火热的计算机相关技术之一，收到越来越多人的关注，互联网巨头们纷纷入场，区块链创业公司也不停涌现，这里对区块链相关基础知识做一个系统介绍，旨在普及区块链基础知识点。不涉及项目推广投资，单纯的对区块链相关基础知识概念作一个说明讲解。涉及相关内容如理解有误，也请及时指正。这里先简单对区块链及相关术语做一个整理。包括区块链的概念和在查阅资料时候会常见到的一些词汇。首先是区块链，提到区块链，肯定会听到两个比较最为普遍的词汇，一个是中本聪，一个是比特币。中本聪，《比特币-一种点对点的电子现金系统》 论文作者，同时也是比特币的创造者，2008年创世论文诞生，2009年一月三号，比特币系统运行，也是中本聪奇迹的开始。中本聪一个神秘的人物，有人认为是一个人，也有人认为中本聪是一个组织。比特币，时下最为火爆的加密数字货币，2017年比特币价格一路疯涨，今天一个比特币的收盘价应该5万人民币左右。比特币在论文中，描述为一种电子货币及相关算法。之后比特币的底层技术，被人们逐渐认识重视，然后抽象出来，这就是现在所说的区块链技术，所以从认知普及来说，可以理解为，先有比特币，再有区块链。比特币实现了一种，不需要通过任何中介机构，即可实现比特币网络中各个节点之间的支付交易，保持使用者匿名，当然匿名这个概念之后有机会可以扩展理解下。同时比特币中交易无法撤销，所有记录不可修改，保证所有交易记录可被追溯。说了中本聪和比特币后，进入正题，什么是区块链：现在在网络上搜索区块链，大致是这样的解释：区块链是分布式数据存储、点对点存储、共识机制、加密算法等计算机技术的新型应用模式。本质上区块链是一个去中心化数据库，也常说是分布式统一账本，区块之间通过一串使用密码学相关的字符串相关联。一个个区块串联成为区块链，每一个区块中包含了网络中的交易数据及相关信息。区块链实现的不简单是一种去中心化数据库或者分布式统一账本，通过时间顺序将区块顺序相连后，基于数学密码学，共识机制、保证了数据的不可篡改和不可伪造。上面提到了一些相关技术，有计算机网络基础的人会发现，这些技术单独拆开来看，都不是一个新的技术，并且这些相关技术，之前都有成功的应用。所以我们常说，区块链是把之前相关成熟技术良好的结合在一块，创造的一种新的技术架构，这种新的架构，利用链式数据结构验证和存储数据，使用分布式共识算法来生成写入数据，通过密码学的方式来保证数据传输和访问的安全，同时利用智能合约编程和操作数据来建立一个全新的分布式基础架构。这种新的模式，实现了去中心化，信息匿名、数据不可修改可追溯，最为关键是创立了一种新的信任的模式。更多人理解，区块链是下一代价值互联网的基础。对几个区块链相关概念做下简单说明： 去中心化，其实中本聪的论文中并没有明确说明去中心化这个概念，去中心这个概念也是国内翻译过来理解，随着现在区块链技术1.0、2.0、甚至3.0的发展，去中心化的概念在结合实际应用落地，现在更多提及为一种多中心化，弱中心的理解，当然可能在听到一些演讲的时候，针对区块链中这些中心化的概念都会有一定的争议，这个看个人的理解，但是不可否认，区块链的经典应用，比特币中去中心化被设计的很聪明且很成功。大多数人理解去中心化，就是不需要中介权威机构介入，各个节点直接达成协议即可把相关信息生成。网络中去中心化，那么权力就属于参与其中的大多数节点，而不是几个特权节点。这个之前传统的中心化认证有很大区别。 共识机制：在区块链系统中实现不同节点之间建立信任，获取权益的数学算法。先说明下所有的共识机制都不是完美的，或多或少都会发现共识机制在特定条件下都会出现一些不可避免的缺陷，所以根据各个共识机制的优缺点选择不停的应用场景。共识机制是解决各个独立节点之间互相信任的问题，在众多节点中达到一种较为平衡的一致性状态就是所谓的共识机制，共识机制是保障区块链一直稳定运行的关键，在《精通比特币》一书中，说到共识机制和挖矿的时候，提及过这样一个理解，区块链中的共识是一种保证区块链安全的手段，在比特币中使用的是POW的共识机制，这种方式最早出现在电子邮件系统中过滤垃圾邮件。这种共识就是向全网证明自己做了足够的工作才获得了记账权。 加密算法： 算法是学习区块链中最为头疼的一块，也是最为让人信服的一块，这里只说下非对称加密，简单理解为，加密和解密的过程中分别使用两套密码，加密时候的密码是公钥，公钥对外公开，每个人都可以用公开的公钥来加密一段字符，但在解密时需要个人自己保存的另一套密码，也就是私钥，个人用私钥来解密解读用公钥加密的字符。目前区块链中用到算法有hash算法、merkle tree哈希树算法、椭圆曲线算法、SHA-256哈希算法、Base58编码等。数学算法保证信任问题。 数字货币：货币的概念这里不做深入说明，我们先说下电子货币，电子货币是通过电子化方式支付的货币，一般理解为，使用一定量的现金或者存款，通过银行或者第三方快捷支付服务，将余额进行交易转移。虚拟货币，这个不是指真实的法币，不做太深刻的分析，就理解为qq中的q币或者一些网络游戏中的游戏币，用来购买交易游戏或虚拟环境中的的货物。数字货币比上述两种来的更为复杂，一般结合区块链，我们讲到的数字货币指的是加密数字货币。通过加密算法、共识机制来保证运行。以比特币为例，论文中称为点对点电子现金支付系统。 总结下： 区块链是一系列技术结合的新应用模式，它包含了密码学、算法、分布式架构、P2P网络等一系列的技术，2009年中本聪创造了比特币，随着比特币的火热让人们逐渐认识和重视区块链。区块链被理解为去信任化“机器”，普遍认为它能实现互联网的价值传递，是新一代价值互联网架构的基石。目前对区块链技术的应用研究也层出不穷，比特币、莱特币等一系列的数字货币，以太坊、IBM的超级账本，国内各大互联网巨头和一众区块链共识等，各家都在积极探索区块链技术。 区块链定义：网络中一种分布式架构系统，通过密码学、共识算法、P2P对等网络交互，实现网络中去信任化的方式全节点集体维护一致可靠分布式账本技术架构。换种通俗的说法，区块链就是网络中各个参与者，都有一份相同可靠的数据副本，数据的写入需要网络中节点达成一种共识，和之前传统化中心机构来记录数据不同，它不依赖中心来记录数据。从区块链定义来理解，区块链保证了网络中数据的可靠，不依赖中心认证保证了信任的传递，这是目前对区块链技术价值普遍的认为。根据这些特性设想了众多应用场景：金融支付清算、数字身份、物联网、供应链、艺术版权等。 最后说下三个误区： 区块链不是比特币，区块链是比特币底层技术架构，比特币是区块链的一个应用。两者不是同一个概念。 区块链降低成本，区块链无中心机构认证，简化交易环节，可节省第三方中介认证的成本，但这不代表区块链技术是一种廉价的技术，在区块中写入保存数据需要成本，再者区块链技术整个开发设计过程不是之前山寨币那种模式，也是需要大量的成本的投入。 区块链技术目前还在发展阶段，很多人都理解在技术发展前期，项目大多还是实验性质，不盲目因为区块链而去搭建区块链。在实验室中跑通了一段代码，不代表实际应用中可以真正应用，明知有缺陷的上线是对系统本身的不负责任。]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>Hash</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块基础-常见词汇]]></title>
    <url>%2F2018%2F09%2F10%2FBlockChain-Basis-common-vocabulary%2F</url>
    <content type="text"><![CDATA[单纯的对区块链相关基础常见词汇作一个解释说明。区块链：Blockchain，分布式存储、加密算法、共识机制、P2P传输等计算机技术结合的新型应用模式。 区块：Block，用于记录区块链系统中数据的存储。 链：chain，区块头中通过引用哈希值链接。 区块链服务：BAAS，blockchain as a service，区块链即服务。 分布式：Decentralized，不依赖中心服务器，分布的计算机资源进行计算处理的模式。 共识机制：consensus，区块链中事务达成的分布式共识算法。 P2P传输：peer-to-peer P2P，对等互联网网络技术。 加密算法：针对数据加密使其成为不可读的一段密文，通过密钥加解密。 哈希算法：将任意长度的二进制值映射为较短固定长度的二进制值的一种算法。 对称加密：加密解密使用同一密钥。 非对称加密：加解密通过公钥私钥，配对使用。 公有链：PublicBlockChains，公共网络中任何个人团体接入，任何节点均可参与共识过程。 联盟链：ConsortiumBlockChains，共识过程由预选节点控制，一般为各企业机构互联形成。 私有链：privateBlockChains，私有区块链，数据记录在单一组织机构中，分权限对外开放，一般是单一企业机构构建。 图灵完备：turing complete图灵完备是指计算机中一切计算的问题都可以计算，这样的虚拟机或者编程语言称为图灵完备。 智能合约：smart contract，部署在区块链系统中，一段合约代码，或一套以数字形式定义的承诺，包括合约参与方可以在其上执行承诺的协议。 匿名：unlinkability，中文解释为无关联性。 软分叉：当新共识规则发布后，没有升级的节点会因为不知道新共识规则下，而生产不合法的区块，就会产生临时性分叉。 硬分叉：区块链发生永久性分歧，在新共识规则发布后，部分没有升级的节点无法验证已经升级的节点生产的区块，产生硬分叉。 EVM：以太坊虚拟机。 POW：proof of work，工作量证明。 POS：proof of stake，权益证明。 DPOS：delegate proof of stake，股份授权证明。 PBFT：practical Byzantine fault tolerance，实用拜占庭容错。 ECC：椭圆加密算法，一种公钥加密算法。 SHA：secure hash algorithm，安全散列算法，NIST发布一系列密码散列函数。 SPV：Simplified Payment Verification，简单支付验证。 Merkletree：梅克尔树，merkle tree是计算机数据结构中的一种树。 DAG：计算机数据结构中有向无环图。 DAPP：去中心化应用。 Doublespending：双重支付，也称为“双花”。 BIP：bitcoin improvement proposals，bitcoin改进协议。]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[以太坊基础-以太坊私有链搭建]]></title>
    <url>%2F2018%2F09%2F06%2FEthereum-Basis-setup-eth-private-chain%2F</url>
    <content type="text"><![CDATA[以太坊私有链搭建搭建环境：Ubuntu16.04.1 amd64Vmware Workstation参考：GitHub以太坊官方项目Go-Ethereum精通以太坊Go-Ethereum/wiki 0x00-安装前准备①将source list源更换为阿里云。②常用工具安装123$ sudo apt-get install git curl wget -y$ sudo apt-get install openssh-*$ sudo /etc/init.d/ssh restart 0x01-Install Go环境注意：Ubuntu的版本/go的版本/安装的途径(manager 如apt-get等或者source code)官网笔者使用源代码安装方式 Building from source codeGo下载地址安装文档 下载，解压至/usr/local目录12$ wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz$ sudo tar -C /usr/local -xvf go1.11.linux-amd64.tar.gz 设置GOPATH和PATH12$ mkdir -p ~/go; echo "export GOPATH=$HOME/go" &gt;&gt; ~/.bashrc$ echo "export PATH=$PATH:$HOME/go/bin:/usr/local/go/bin" &gt;&gt; ~/.bashrc 设置用户环境1$ source ~/.bashrc 至此源码安装完成。 Go：GitHub项目Go：Github/wiki/UbuntuGo：其他源码安装 Installing from PPAInstall-for-Ubuntu16.04-LTS123$ sudo add-apt-repository ppa:longsleep/golang-backports $ sudo apt-get update $ sudo apt-get install golang-go try following maybe old1$ sudo apt-get install golang-go unsing following command 安装指定版本123$ sudo add-apt-repository ppa:gophers/archive $ sudo apt-get update $ sudo apt-get install golang-1.10-go 若想安装最新版使用下面命令1$ sudo snap install --classic go Hello world by GoGo语言实例创建一个hello.go文件，并粘贴以下测试代码12345$ cd $GOPATH$ mkdir src &amp;&amp; cd src$ touch hello.go$ nano hello.go 测试代码12345package main import "fmt" func main()&#123; fmt.Println("Hello, 世界") &#125; and then12$ go run hello.goHello, 世界 0x02-Building Go Ethereum注意：安装的途径(manager 如 apt-get等或者source code)/geth的版本笔者使用git clone下载的代码进行部署 Building from source code注：请确保已安装Go和C语言编译器,请参考0x01官方源代码安装1$ git clone https://github.com/ethereum/go-ethereum.git 未科学上网下载速度较慢笔者先在本机下载好之后在复制到虚拟机1234$ git clone https://github.com/ethereum/go-ethereum.git文件较大，先压缩再scp$ tar -czvf go-ethereum.tar.gz go-ethereum/$ scp go-ethereum.tar.gz username@vmip:$GOPATH/src/ 回到虚拟机1234567891011$ cd $GOPATH/src/$ tar -xvf go-ethereum.tar.gz$ cd go-ethereum$ make gethbuild/env.sh go run build/ci.go install ./cmd/geth&gt;&gt;&gt; /usr/local/go/bin/go install -ldflags -X main.gitCommit=bfce00385f1c8dab222b7ddab6c336177a5ae731 -v ./cmd/gethgithub.com/ethereum/go-ethereum/vendor/golang.org/x/sys/unix................................github.com/ethereum/go-ethereum/cmd/gethDone building.Run "/home/sun/go/src/go-ethereum/build/bin/geth" to launch geth. 添加geth终端命令12$ echo "export PATH=$PATH:$HOME/go/src/go-ethereum/build/bin" &gt;&gt; ~/.bashrc$ source ~/.bashrc start your node.已添加geth到终端命令可以直接运行geth启动节点1$ geth 或者运行build/bin/geth，当前路径为：go/src/go-ethereum/1$ ./build/bin/geth 1234567891011121314151617INFO [09-12|18:57:43.187] Maximum peer count ETH=25 LES=0 total=25INFO [09-12|18:57:43.188] Starting peer-to-peer node instance=Geth/v1.8.16-unstable-bfce0038/linux-amd64/go1.11INFO [09-12|18:57:43.188] Allocated cache and file handles database=/home/sun/.ethereum/geth/chaindata cache=768 handles=512INFO [09-12|18:57:43.390] Writing default main-net genesis blockINFO [09-12|18:57:43.771] Persisted trie from memory database nodes=12356 size=1.88mB time=84.713882ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [09-12|18:57:43.772] Initialised chain configuration config="&#123;ChainID: 1 Homestead: 1150000 DAO: 1920000 DAOSupport: true EIP150: 2463000 EIP155: 2675000 EIP158: 2675000 Byzantium: 4370000 Constantinople: &lt;nil&gt; Engine: ethash&#125;"INFO [09-12|18:57:43.772] Disk storage enabled for ethash caches dir=/home/sun/.ethereum/geth/ethash count=3INFO [09-12|18:57:43.772] Disk storage enabled for ethash DAGs dir=/home/sun/.ethash count=2INFO [09-12|18:57:43.772] Initialising Ethereum protocol versions="[63 62]" network=1^CINFO [09-12|18:59:49.128] Got interrupt, shutting down...INFO [09-12|18:59:49.129] IPC endpoint closed endpoint=/home/sun/.ethereum/geth.ipcINFO [09-12|18:59:49.129] Blockchain manager stoppedINFO [09-12|18:59:49.129] Stopping Ethereum protocolINFO [09-12|18:59:49.129] Ethereum protocol stoppedINFO [09-12|18:59:49.129] Transaction pool stoppedINFO [09-12|18:59:49.129] Database closed database=/home/sun/.ethereum/geth/chaindata Installing from 包管理器下面两种方式，如果没有科学上网，速度较慢。123$ sudo apt-get install git -y$ go get -d github.com/ethereum/go-ethereum$ go install github.com/ethereum/go-ethereum/cmd/geth 或者在Ubuntu 上使用包管理器 PPAs安装，先添加库12$ sudo apt-get install software-properties-common $ sudo add-apt-repository -y ppa:ethereum/ethereum 此时便可安装最新稳定版的 Go Ethereum12$ sudo apt-get update $ sudo apt-get install ethereum 如果你想尝鲜使用开发版本，则只需执行：12$ sudo apt-get update$ sudo apt-get install ethereum-unstable 0x03-搭建以太坊私有链远航|以太坊测试私链的搭建Private network搭建以太坊私有链主要有以下事项 自定义创世块（Genesis Block） 自定义数据存放位置 自定义网络ID 关闭节点发现（Node Discovery）（推荐） 自定义创世区块首先需要为私有链定义一个创世状态，使用 JSON 文件定义，例如取名为：genesis.json我在用户根目录，新建json文件，写入以下定义12$ touch genesis.json$ nano genesis.json an example of a custom genesis.json file1234567891011121314&#123; "config": &#123; "chainId": 15, "homesteadBlock": 0, "eip155Block": 0, "eip158Block": 0 &#125;, "difficulty": "200000000", "gasLimit": "2100000", "alloc": &#123; "7df9a875a174b3bc565e6424a0050ebc1b2d1d82": &#123; "balance": "300000" &#125;, "f41c74c9ae680c1aa78f42e5647a62f353b7bdde": &#123; "balance": "400000" &#125; &#125;&#125; 在创世区块配置文件中，有四个参数必须要指定的： config：区块链的相关参数 chainId：防止重放攻击（replay attack，简单来说就是未经授权的用户来假扮交易的发送者） homesteadBlock：Homestead是以太坊的第二个发行版本（Frontier是第一个发行版本），值为0表示的使用的是该版本的以太坊 difficult：初始挖矿难度 gasLimit：每一个区块所消耗的gas上限 alloc：可以往地址中预先分配以太币 生成创世区块要创建使用上述genesis块的数据库，运行以下命令。这将导入并设置链的规范生成块1$ geth --datadir path/to/custom/data/folder init genesis.json –datadir：指定区块链的数据目录（默认为~/.ethereum） init：创世块初始化JSON文件的目录笔者Demo，如果之前使用过geth命令则会报错已存在database，请删除后重新运行。1$ geth --datadir ~/.ethereum/ init genesis.json 123456789INFO [09-18|17:42:20.031] Maximum peer count ETH=25 LES=0 total=25INFO [09-18|17:42:20.031] Allocated cache and file handles database=/home/sun/.ethereum/geth/chaindata cache=16 handles=16INFO [09-18|17:42:20.315] Writing custom genesis blockINFO [09-18|17:42:20.316] Persisted trie from memory database nodes=3 size=399.00B time=218.099µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [09-18|17:42:20.317] Successfully wrote genesis state database=chaindata hash=614a31…9df7baINFO [09-18|17:42:20.317] Allocated cache and file handles database=/home/sun/.ethereum/geth/lightchaindata cache=16 handles=16INFO [09-18|17:42:20.566] Writing custom genesis blockINFO [09-18|17:42:20.566] Persisted trie from memory database nodes=3 size=399.00B time=100.906µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [09-18|17:42:20.567] Successfully wrote genesis state database=lightchaindata hash=614a31…9df7ba Future runs of geth on this data directory will use the genesis block you havedefined. 1$ geth --datadir path/to/custom/data/folder --networkid 15 启动以太坊私有测试链，创建私有网络相关启动参数启动geth有如下主要参数（可以使用geth –help进行查看）： –nodiscover：关闭节点的可发现性，可以防止使用了相同network id和创世块的节点连接到你的区块链网络中（只能通过手动来添加节点） –maxpeers 0：指定网络中的最多节点数 –rpc：启用RPC服 –rpcapi “db,eth,net,web3”：指定启用的RPC API –rpcport “8080”：指定RPC的端口 –rpccorsdomain：指定哪些URL可以连接到你的节点 –datadir：以太坊区块链的数据目录 –port：连接到其它节点的网络监听端口 –identity “FirstNode”：指定节点名称 console：启动geth控制台程序 启动geth使用以下命令来启动geth：但如何设置网络ID？？？？1$ geth --identity "ETH-MainNode" --rpc --rpcport "6060" --rpccorsdomain "*" --datadir "path/to/custom/data/folder" --port "30303" --nodiscover --maxpeers 5 --rpcapi "admin,db,eth,debug,miner,net,shh,txpool,personal,web3" --networkid 3131 console geth command简介0x04 安装Mist钱包Mist GitHub安装前准备在Linux安装.zip安装包需要先安装：libgconf2-41apt-get install libgconf2-4 安装nodejs123456$ wget https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-x64.tar.xz $ tar -xvf node-v8.9.1-linux-x64.tar.xz $ mv node-v8.9.1-linux-x64 nodejs $ ln -s ~/nodejs/bin/* /usr/local/bin/ $ node -v $ npm -v 安装Meteor1$ curl https://install.meteor.com/ | sh 下为终端过程，略。12345678910111213141516 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 7786 0 7786 0 0 2260 0 --:--:-- 0:00:03 --:--:-- 2260Downloading Meteor distributionRetrying download in 5 seconds...######################################################################## 100.0%Meteor 1.7.0.5 has been installed in your home directory (~/.meteor).Writing a launcher script to /usr/local/bin/meteor for your convenience.This may prompt for your password.[sudo] password for sun:To get started fast: $ meteor create ~/my_cool_app $ cd ~/my_cool_app $ meteorOr see the docs at: docs.meteor.com 安装Yarn package manager12$ curl -o- -L https://yarnpkg.com/install.sh | bash$ export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH" 下为终端过程，略。123456789101112131415161718192021222324252627282930313233 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 7041 0 7041 0 0 2745 0 --:--:-- 0:00:02 --:--:-- 2745Installing Yarn!&gt; Downloading tarball...[1/2]: https://yarnpkg.com/latest.tar.gz --&gt; /tmp/yarn.tar.gz.l22qYRpji8 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 91 100 91 0 0 73 0 0:00:01 0:00:01 --:--:-- 73100 608 0 608 0 0 192 0 --:--:-- 0:00:03 --:--:-- 386100 915k 100 915k 0 0 46827 0 0:00:20 0:00:20 --:--:-- 70029[2/2]: https://yarnpkg.com/latest.tar.gz.asc --&gt; /tmp/yarn.tar.gz.l22qYRpji8.asc100 95 100 95 0 0 335 0 --:--:-- --:--:-- --:--:-- 335100 612 0 612 0 0 767 0 --:--:-- --:--:-- --:--:-- 597k100 832 100 832 0 0 722 0 0:00:01 0:00:01 --:--:-- 722&gt; Verifying integrity...gpg: Signature made Sat 04 Aug 2018 03:53:36 AM CST using RSA key ID B6FF4DE3gpg: Good signature from "Yarn Packaging &lt;yarn@dan.cx&gt;"gpg: WARNING: This key is not certified with a trusted signature!gpg: There is no indication that the signature belongs to the owner.Primary key fingerprint: 72EC F46A 56B4 AD39 C907 BBB7 1646 B01B 86E5 0310 Subkey fingerprint: E219 30C4 D0A4 AA46 1858 1F7A E074 D16E B6FF 4DE3&gt; GPG signature looks good&gt; Extracting to ~/.yarn...&gt; Adding to $PATH...&gt; We've added the following to your /home/sun/.bashrc&gt; If this isn't the profile of your current shell then please add the following to your correct profile:export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"&gt; Successfully installed Yarn 1.9.4! Please open another terminal where the `yarn` command will now be available. 安装 MIST官网zip压缩包直接使用https://github.com/ethereum/mist/releases12345678910111213$ wget https://github.com/ethereum/mist/releases/download/v0.11.1/Mist-linux64-0-11-1.zip$ mkdir mist$ unzip ./Downloads/Mist-linux64-0-11-1.zip -d mist/$ yarnyarn install v1.9.4info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 0.04s. 附，详情见文末-其他记录-下为另一种方式git clone from github并yarn，可以参考的链接：GitHub-mist安装：https://github.com/ethereum/mistcsdn-mist安装：https://blog.csdn.net/Vinsuan1993/article/details/77144263以失败告终，因错误内容较多，不在此处显示。置于文末。 0x05-mist连接geth私有网络执行私有网络1$ geth --datadir path/to/custom/data/folder init genesis.json –datadir：指定区块链的数据目录（默认为~/.ethereum） init：创世块初始化JSON文件的目录 连接私有网络1$ ./mist --rpc path/to/custom/data/folder/geth.ipc 下为笔者操作12./mist --rpc ~/.ethereum/geth.ipc geth --datadir ~/.ethereum/ init genesis.json 至此连接私有网络完成。 后续继续参考：如何搭建以太坊私有链基于以太坊构建私有区块链网络教程指南 其他记录Stick Notes2018年9月6日15点36分博客园Go-Ethereum官方GitHubgeth下载ethereum/misthttp://ethereum.mochain.info/basic/install-geth.html#on-ubuntuhttps://www.bookstack.cn/read/N-blog/book-4.15.md golang下载Go-Ethereum-wikiBuilding-Ethereum-wikigo-ethereum install-for-Ubuntu 安装MIST from GitHubgit clone from github并yarn，可以参考的链接：GitHub-mist安装：https://github.com/ethereum/mistcsdn-mist安装：https://blog.csdn.net/Vinsuan1993/article/details/77144263以失败告终1$ git clone https://github.com/ethereum/mist.git 123456Cloning into 'mist'...remote: Counting objects: 14475, done.remote: Compressing objects: 100% (147/147), done.Receiving objects: 69% (10096/14475), 194.98 MiB | 261.00 KiB/sResolving deltas: 100% (9869/9869), done.Checking connectivity... done. 123$ cd mist$ git submodule update --init --recursive$ yarn 12The program 'yarn' is currently not installed. You can install it by typing:sudo apt install cmdtest 123$ export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"$ yarn 123456789101112131415161718192021222324252627282930313233343536yarn install v1.9.4 [1/4] Resolving packages... [2/4] Fetching packages... info There appears to be trouble with your network connection. Retrying... info There appears to be trouble with your network connection. Retrying... info There appears to be trouble with your network connection. Retrying... info There appears to be trouble with your network connection. Retrying... [##################################################] 1274/1275 info There appears to be trouble with your network connection. Retrying... info "fsevents@1.2.4" is an optional dependency and failed compatibility check. Excluding it from installation. [3/4] Linking dependencies... warning " &gt; gulp-babel@7.0.1" has unmet peer dependency "babel-core@6 || 7 || ^7.0.0-alpha || ^7.0.0-beta || ^7.0.0-rc". warning " &gt; gulp-spawn-mocha@3.3.1" has unmet peer dependency "istanbul@^0.4.3". [4/4] Building fresh packages...等了很久.......[1/10] ⠠ sha3[-/10] ⠠ waiting...error /home/sun/mist/node_modules/sha3: Command failed.Exit code: 1Command: node-gyp rebuildArguments:Directory: /home/sun/mist/node_modules/sha3Output:gyp info it worked if it ends with okgyp info using node-gyp@3.6.2gyp info using node@8.11.4 | linux | x64gyp http GET https://nodejs.org/download/release/v8.11.4/node-v8.11.4-headers.tar.gzgyp WARN install got an error, rolling back installgyp ERR! configure errorgyp ERR! stack Error: read ECONNRESETgyp ERR! stack at _errnoException (util.js:992:11)gyp ERR! stack at TLSWrap.onread (net.js:618:25)gyp ERR! System Linux 4.15.0-29-genericgyp ERR! command "/home/sun/nodejs/bin/node" "/home/sun/nodejs/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"gyp ERR! cwd /home/sun/mist/node_modules/sha3 安装失败，重新运行12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394$ yarnyarn install v1.9.4[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@1.2.4: The platform "linux" is incompatible with this module.info "fsevents@1.2.4" is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...warning " &gt; gulp-babel@7.0.1" has unmet peer dependency "babel-core@6 || 7 || ^7.0.0-alpha || ^7.0.0-beta || ^7.0.0-rc".warning " &gt; gulp-spawn-mocha@3.3.1" has unmet peer dependency "istanbul@^0.4.3".[4/4] Building fresh packages...[1/10] ⢀ sha3[2/10] ⠠ secp256k1[3/10] ⠠ keccak[4/10] ⠠ websocketerror /home/sun/mist/node_modules/sha3: Command failed.Exit code: 1Command: node-gyp rebuildArguments:Directory: /home/sun/mist/node_modules/sha3Output:gyp info it worked if it ends with okgyp info using node-gyp@3.6.2gyp info using node@8.11.4 | linux | x64gyp http GET https://nodejs.org/download/release/v8.11.4/node-v8.11.4-headers.tar.gzgyp WARN install got an error, rolling back installgyp ERR! configure errorgyp ERR! stack Error: socket hang upgyp ERR! stack at TLSSocket.onHangUp (_tls_wrap.js:1137:19)gyp ERR! stack at Object.onceWrapper (events.js:313:30)gyp ERR! stack at emitNone (events.js:111:20)gyp ERR! stack at TLSSocket.emit (events.js:208:7)gyp ERR! stack at endReadableNT (_stream_readable.js:1064:12)gyp ERR! stack at _combinedTickCallback (internal/process/next_tick.js:138:11)gyp ERR! stack at process._tickCallback (internal/process/next_tick.js:180:9)gyp ERR! System Linux 4.15.0-29-genericgyp ERR! command "/home/sun/nodejs/bin/node" "/home/sun/nodejs/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"gyp ERR! cwd /home/sun/mist/node_modules/sha3yarn install v1.9.4[1/4] Resolving packages...success Already up-to-date.$ git submodule update --recursive &amp;&amp; yarn task pack-wallet &amp;&amp; (cd interface &amp;&amp; yarn)yarn run v1.9.4$ gulp pack-walletMist version: 0.11.2Electron version: 1.8.4Many gulp tasks can be run in wallet mode using: --walletTo specify a platform (default: all) use: --linux --win[14:54:20] Using gulpfile ~/mist/gulpfile.js[14:54:20] Starting 'pack-wallet'...(node:13780) UnhandledPromiseRejectionWarning: Error: /home/sun/mist/meteor-dapp-wallet/build could not you run "git submodule update --recursive?" at del.then (/home/sun/mist/gulpTasks/building.js:81:13) at &lt;anonymous&gt;(node:13780) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated eitherinside of an async function without a catch block, or by rejecting a promise which was not handled withjection id: 1)(node:13780) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, pions that are not handled will terminate the Node.js process with a non-zero exit code.[14:54:20] The following tasks did not complete: pack-wallet[14:54:20] Did you forget to signal async completion?error Command failed with exit code 1.info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.error Command failed with exit code 1.info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.$ sudo apt-get install build-essentialyarn install v1.9.4[1/4] Resolving packages...success Already up-to-date.$ git submodule update --recursive &amp;&amp; yarn task pack-wallet &amp;&amp; (cd interface &amp;&amp; yarn)yarn run v1.9.4$ gulp pack-walletMist version: 0.11.2Electron version: 1.8.4Many gulp tasks can be run in wallet mode using: --walletTo specify a platform (default: all) use: --linux --win[14:54:20] Using gulpfile ~/mist/gulpfile.js[14:54:20] Starting 'pack-wallet'...(node:13780) UnhandledPromiseRejectionWarning: Error: /home/sun/mist/meteor-dapp-wallet/build could not you run "git submodule update --recursive?" at del.then (/home/sun/mist/gulpTasks/building.js:81:13) at &lt;anonymous&gt;(node:13780) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated eitherinside of an async function without a catch block, or by rejecting a promise which was not handled withjection id: 1)(node:13780) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, pions that are not handled will terminate the Node.js process with a non-zero exit code.[14:54:20] The following tasks did not complete: pack-wallet[14:54:20] Did you forget to signal async completion?error Command failed with exit code 1.info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.error Command failed with exit code 1.info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command. 可能存在的问题，没有科学上网有的资源无法下载。【后附图】]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>Ethereum</tag>
        <tag>MIST</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Markdown]]></title>
    <url>%2F2018%2F08%2F30%2FHello-Markdown%2F</url>
    <content type="text"><![CDATA[Markdown 一种轻量级标记语言 Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。下面参考Wiki和作业部落，对Markdown的使用进行总结予说明。John Gruber 在 2004 年创造了 Markdown，在语法上有很大一部分是跟亚伦·斯沃茨（Aaron Swartz）共同合作的。这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的XHTML（或是HTML）”。 其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上的被阅读，而不用被一些格式化指令标记（像是RTF与HTML）。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：Setext、Texile、reStructuredText。许多网站都使用Markdown或是其变种让用户更利于讨论。例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 Markdown同时还是一个由Gruber编写的Perl脚本：Markdown.pl。它把用markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号&lt;和&amp;号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器.Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提问的智慧]]></title>
    <url>%2F2018%2F08%2F30%2FHow-To-Ask-Questions-The-Smart-Way%2F</url>
    <content type="text"><![CDATA[How To Ask Questions The Smart WayCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。 提问的智慧 原文网址：http://www.catb.org/~esr/faqs/smart-questions.html Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu 本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译； 文章转载出处 目录 声明 简介 在提问之前 当你提问时 慎选提问的论坛 Stack Overflow 网站和 IRC 论坛 第二步，使用项目邮件列表 使用有意义且描述明确的标题 使问题容易回复 用清晰、正确、精准并合法语法的语句 使用易于读取且标准的文件格式发送问题 精确地描述问题并言之有物 话不在多而在精 别动辄声称找到 Bug 可以低声下气，但还是要先做功课 描述问题症状而非猜测 按发生时间先后列出问题症状 描述目标而不是过程 别要求使用私人电邮回复 清楚明确的表达你的问题以及需求 询问有关代码的问题时 别把自己家庭作业的问题贴上来 去掉无意义的提问句 即使你很急也不要在标题写紧急 礼多人不怪，而且有时还很有帮助 问题解决后，加个简短的补充说明 如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了 如果还是搞不懂 处理无礼的回应 如何避免扮演失败者 不该问的问题 好问题与蠢问题 如果得不到回答 如何更好地回答问题 相关资源 鸣谢 声明许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明： 本指南不提供此项目的实际支持服务！ 我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。 如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。 简介在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。 不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件好事；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。 首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。 尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。 我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。 我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。 我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答赢家（winner）的问题。 如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。 所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。 如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。 （欢迎对本指南提出改进意见。你可以 email 你的建议至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。 在提问之前在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情： 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案。 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案。 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。 运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 Google 论坛，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。 别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。 准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。 小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。 绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。 另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。 当你提问时慎选提问的论坛小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者： 在与主题不合的论坛上贴出你的问题。 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。 在太多的不同新闻群组上重复转贴同样的问题（cross-post）。 向既非熟人也没有义务解决你问题的人发送私人电邮。 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。 因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。 向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。 在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。 别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。 一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。 可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。 Stack Overflow搜索，然后 在 Stack Exchange 问。 近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。 因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。 Stack Exchange 已经成长到超过一百个网站，以下是最常用的几个站： Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。 Stack Overflow 是问写程序有关的问题。 Server Fault 是问服务器和网管相关的问题。 网站和 IRC 论坛本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。 事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用我们的版本”。 在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。 通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。 在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。 第二步，使用项目邮件列表当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法： 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。 然而，如果你确信你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意） 如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。 使用有意义且描述明确的标题在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。 一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。 蠢问题：救命啊！我的笔记本电脑不能正常显示了！ 聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。 更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。 编写目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境和你遇到的问题。 总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。 如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。 对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。 仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。 在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你只想在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。 使问题容易回复以请将你的回复寄到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。 在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。 用清晰、正确、精准并语法正确的语句我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。 正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。 正确地拼写、使用标点和大小写，不要将its混淆为it&#39;s，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行）。 更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通信中的简写或火星文，如将的简化为d会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。 如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。 如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用] English is not my native language; please excuse typing errors. 英文不是我的母语，请原谅我的错字或语法。 If you speak $LANGUAGE, please email/PM me;I may need assistance translating my question. 如果你说某语言，请寄信/私讯给我；我需要有人协助我翻译我的问题。 I am familiar with the technical terms,but some slang expressions and idioms are difficult for me. 我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。 I’ve posted my question in $LANGUAGE and English.I’ll be glad to translate responses, if you only use one or the other. 我把我的问题用某语言和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。 使用易于读取且标准的文件格式发送问题如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以： 使用纯文字而不是 HTML (关闭 HTML 并不难）。 使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。 但是，对一些特殊的文件不要设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。 精确地描述问题并言之有物 仔细、清楚地描述你的问题或 Bug 的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能的提供一个可以重现这个问题的可控环境的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。 话不在多而在精你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。 别动辄声称找到 Bug当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。 请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。 低声下气不能代替你的功课有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。 描述问题症状而非你的猜测告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…。 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！ 按发生时间先后列出问题症状问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。 描述目标而不是过程如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？ 聪明问题 我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。 第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。 别要求使用私人电邮回复黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。 当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。 这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。 清楚明确的表达你的问题以及需求漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。 如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。 要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。 所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问我想更好的理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。 询问有关代码的问题时别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;比较有可能让你得到回应。 最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看话不在多而在精一节）。 一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。 如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。 别把自己家庭作业的问题贴上来黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。 如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的使用者邮件列表或论坛中提问。尽管黑客们会看出来，但一些有经验的使用者也许仍会给你一些提示。 去掉无意义的提问句避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。 首先：如果你对问题的描述不是很好，这样问更是画蛇添足。 其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。 一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。 即使你很急也不要在标题写紧急这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。 有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。 当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛绒绒的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。 如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。 礼多人不怪，而且有时还很有帮助彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。 坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的） 然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。 （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。） 问题解决后，加个简短的补充说明问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。 最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X的有趣），因此可以利用此时间去解决其它问题。 补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。 对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。 除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。 至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。 思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。 在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。 如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了有一个古老而神圣的传统：如果你收到RTFM （Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。 RTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！） 在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。 通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为 你需要的信息非常容易获得； 你自己去搜索这些信息比灌给你，能让你学到更多。 你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。 如果还是搞不懂如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。 比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？ 处理无礼的回应很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。 如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这没有发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。 另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。 （有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。 Jeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。 在下一节，我们会谈到另一个问题，当你行为不当时所会受到的冒犯。 如何避免扮演失败者在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。 这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做： 熬过去，这很正常。事实上，它是有益健康且合理的。 社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。 也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。 夸张的讲法是：你要的是友善（以上述方式）还是有用？两个里面挑一个。 记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。 有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是真的会把问题搞砸。 这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。 也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。 不该问的问题以下是几个经典蠢问题，以及黑客没回答时心中所想的： 问题：我能在哪找到 X 程序或 X 资源？ 问题：我怎样用 X 做 Y？ 问题：如何设定我的 shell 提示？ 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 问题：我的程序/设定/SQL 语句没有用 问题：我的 Windows 电脑有问题，你能帮我吗？ 问题：我的程序不会动了，我认为系统工具 X 有问题 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 问题：我能在哪找到 X 程序或 X 资源？ 回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？ 问题：我怎样用 X 做 Y？ 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。 问题：如何设定我的 shell 提示？？ 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。 问题：我的{程序/设定/SQL 语句}不工作 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种 你还有什么要补充的吗？ 真糟糕，希望你能搞定。 这关我有什么屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？ 回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。 注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。 问题：我的程序不会动了，我认为系统工具 X 有问题 回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到使用者群组的清单）。 注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和所有被怀疑的硬件作关键词仔细搜索。 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！ 好问题与蠢问题最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。 蠢问题： 我可以在哪儿找到关于 Foonly Flurbamatic 的资料？ 这种问法无非想得到 STFW 这样的回答。 聪明问题： 我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？ 这个问题已经 STFW 过了，看起来他真的遇到了麻烦。 蠢问题： 我从 foo 项目找来的源码没法编译。它怎么这么烂？ 他觉得都是别人的错，这个傲慢自大的提问者。 聪明问题： foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？ 提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。 蠢问题： 我的主机板有问题了，谁来帮我？ 某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。 聪明问题： 我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？ 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。 事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。 通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。 事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的名人，而是因为我用了正确的方式来提问。 黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。 如果得不到回答如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。 总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。 你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。 有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。 另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。 对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。 如何更好地回答问题态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。 对初犯者私下回复。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。 如果你不确定，一定要说出来！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。 如果帮不了忙，也别妨碍他。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。 试探性的反问以引出更多的细节。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。 尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。 如果你决定回答，就请给出好的答案。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。 正面的回答问题！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。 帮助你的社区从问题中学习。当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。 如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。 相关资源如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。 当你发布软件或补丁时，试着按软件发布实践操作。 鸣谢Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。]]></content>
      <categories>
        <category>favorites</category>
      </categories>
      <tags>
        <tag>HOWTO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Glitter&Gloss]]></title>
    <url>%2F2017%2F03%2F26%2FGlitterGloss%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>MV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给你分享2016年的书单]]></title>
    <url>%2F2016%2F12%2F31%2Fbooklist-2016%2F</url>
    <content type="text"><![CDATA[第一个年阅读计划，一月一本。流水账表述，便也粗糙，望见谅。读这些书有什么用？讲真，答不上来 /尴尬脸.jpg。文学爱好？算不上爱好。现在渐渐觉得阅读不要附有功利性的目的。读一本书而已。额，引用一段话来敷衍吧 “我读过很多书，但后来大部分都被我忘记了，那阅读的意义是什么？答：当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经长成为我的骨头和肉。” 一月《苦难辉煌》 by金一南少将，坐在数图三楼看完的，看完并没有慷慨激昂的感觉，了解一段历史的细节故事。 二月《孤独是生命的礼物》 ，周国平、陈忠实等人的散文选集，朴实，真。 三月《一个人的朝圣》 必须赞啊！必须赞！赞到哭。花了三天时间读完的，第一次有迫切看完又担心看完的一本书的感觉。 四月《在残酷的世界里骄傲的活着》张芮涵 的反正以前没听过这个作者，看书名有点浮夸，和二月那本书一起买的，我也记不得当时为啥一下买了这两本书/笑哭。 五月 《凯尔特的薄暮》叶芝译版，读起来更像诗……奈何一个人随着年龄增长，梦想便不复轻盈。他开始用双手掂量生活，更看重果实而非花朵。 六月《皮囊》 朋友那讨的，朴实、人心、生命。 七月《围城》 从学校背过来的书，感觉到讽刺性质，性格特征明显，其实以前并不了解钱老。 八月《奎妮的情歌》 微博第一次转发抽奖活动，然后就中了。应该是算作《一个人的朝圣》的姐妹篇，而非第二部，以奎妮的口吻来叙述与哈罗德家庭的交集。可以尝试两本同步阅读。 九月《边城》 高中教材节选了部分，终于读了完整版，更想去茶峒小镇了。我想你一定记得这句话：“这个人也许永远不回来了，也许“明天”回来！” 十月《向着光亮那方》好吧，我承认是粉同哥才看的，好朋友没吃晚饭啃面包在内场要得签名.十一月《我讲个笑话你可别哭啊》笑了哭了 十二月《活着》生活，既然生着，记得活着，热情地活着。 后两篇仓促结尾，爪机，眼疼，待更…后续入手《三体》《S.忒修斯之船》… 于2016年12月31日]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
        <tag>BookList</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这个人也许永远不回来了，也许“明天”回来！]]></title>
    <url>%2F2016%2F12%2F11%2Fbook2016-BorderTown-by-ShenCongwen-end%2F</url>
    <content type="text"><![CDATA[可是到了冬天那个圮坍了的白塔又重新修好了。 那个在月下唱歌使翠翠在睡梦里为歌声把灵魂轻轻浮起的青年人还不曾回到茶峒来。………]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[由四川过湖南去，靠东有一条官路。]]></title>
    <url>%2F2016%2F11%2F25%2Fbook2016-BorderTown-by-ShenCongwen-begain%2F</url>
    <content type="text"><![CDATA[由四川过湖南去， 靠东有一条官路。 这官路将近湘西边境到了一个地方名为“茶峒”的小山城时， 有一小溪， 溪边有座白色小塔， 塔下住了一户单独的人家。 这人家只一个老人， 一个女孩子， 一只黄狗。 ——摘《边城》在这洗净的田园里，爱是透明的，沱江边上，连惆怅，也有了淡淡的人情味儿。——记再读《边城》]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[坚定的爱的光芒]]></title>
    <url>%2F2016%2F11%2F13%2Fbook2016-TheLoveSong-of-MissQueenie-by-RachelJoyce-end%2F</url>
    <content type="text"><![CDATA[我们回到在《一个人的朝圣》里，65岁的哈罗德，87天的徒步，627英里，北上的路上伴随一个信念：只要他不停下一直在走，奎妮就一定能活下来。从街道商贩、迷途少年、公路同行者。。。。。。登上报纸等等等等。如此，哈罗德是被千万的人爱着，奎妮也一样，在第二部，《奎妮的情歌》我姑且称之为第二部吧，用作者本人的话说：“我写的不是《一个人的朝圣》的续集，也不是一部前传，我写的这一本书，它和哈罗德弗莱比肩而坐，我会把这本书称为，一个伴儿。”，可以说是故事的另一面，这是奎妮，在奎妮这里，有着她20年的埋藏的秘密，有无数的微小瞬间，有温暖的大手，坐在车里的对话，海上的花园，如何处理痛苦，如何爱，如何休息放松，如何相处，如“因为同一样东西发笑也可以是另一种在一起的方式”。当哈罗德旅程开始的时候，奎妮的旅程也开始了。他们各自因此而变得完整。我们从奎妮的角度去回忆过去的二十年，我们跟着奎妮的脚步，走过她与病魔争斗的日子，仅能活动的手指叙述过去的美好，对哈罗德的期盼与纠结。 引用：“跟哈罗德一样，奎妮有其阳光和黑暗的一面，但当故事结束，合上书本，作者巧妙的地让黑暗消失了，挥之不去的是奎妮坚定的爱的光芒”]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那封，改变了一切的信，是星期二寄到的]]></title>
    <url>%2F2016%2F11%2F10%2Fbook2016-TheUnlikelyPilgrimage-of-HaroldFry-by-RachelJoyce-end%2F</url>
    <content type="text"><![CDATA[我会走路过来。从南德文郡一路走到贝里克郡。 哈罗德相信自己的旅程真正开始了。 有些事情可以有好几个起点，也可以用不同的方式开始。 有时候你以为自己已经展开了新的一页，实际上却可能只是重复以前的步伐。 记得应该是三月份，当时大概用了3天时间读完《一个人的朝圣》，翻过最后一页，不知道自己是叹息还是沉重，结局有一点点意外，从另一个角度再仔细想想的话，倒也会让你觉得温馨。 哈罗德·弗莱，几近没有存在感的退休老人，垂暮之年，勇敢的踏出家门，执着的走上一条救赎之路在他看来只要自己在走，奎妮就一定活着。嗯，也许有时候我们认为在救赎他人的时候，其实是对自己的救赎。 627英里的徒步，不要说一个老人，就算是一个正常人可能都不会坚持，哈罗德把他变成了一种现实。 第一次有想读完却怕读完的感受，也许这就是一本好书的价值吧。 我想： 有多少朝圣者， 就有多少条朝圣路， 路上书写着你我的故事。 不必相同， 也不可能相同。 只要：的确走在，你的朝圣路上。你，并不孤独。]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
</search>
